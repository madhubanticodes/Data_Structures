#include <iostream>

using namespace std;

class Circularll
{   public:
    struct Node
    {
        int data;
        Node *next;
    };
    Node *head,*tail;
    void createcll()
    {
        int choice=1;
        Node *newnode,*temp;
        head=NULL;
        while(choice)
        {
            newnode=new Node();
            cout<<"\nEnter data=\n";
            cin>>newnode->data;
            newnode->next=NULL;
            if(head==NULL)
            {
                head=temp=newnode;
            }
            else
            {
                temp->next=newnode;
                temp=newnode;
            }
            temp->next=head;
            cout<<"\n 1 to continue, 0 to exit \n";
            cin>>choice;
        }
    }
    void display()
    {
        Node *temp;
        if(head==NULL)
        {
            cout<<"\n List is empty\n";
        }
        else
        {
            temp=head;
            while(temp->next!=head)
            {
                cout<<temp->data;
                temp=temp->next;
            }
            cout<<temp->data;
        }
    }
    void insertatbeg()
    {
        Node *newnode;
        newnode=new Node();
        cout<<"\n Enter data\n";
        cin>>newnode->data;
        newnode->next=NULL;
        if(tail==NULL)
        {
            tail=newnode;
            tail->next=newnode;
        }
        else
        {
            newnode->next=tail->next;
            tail->next=newnode;
        }
    }
    void insertatend()
    {
        Node *newnode;
         newnode=new Node();
        cout<<"\n Enter data\n";
        cin>>newnode->data;
        newnode->next=NULL;
        if(tail==NULL)
        {
            tail=newnode;
            tail->next=newnode;
        }
        else
        {
            newnode->next=tail->next;
            tail->next=newnode;
            tail=newnode;
        }
    }
    void insertatpos()
    {
        Node *newnode,*temp;
        int pos;
        int i=1;
        cout<<"\n Enter position=\n";
        cin>>pos;
        if(pos==1)
        {
            insertatbeg();
        }
        else
        {
            newnode=new Node();
            cout<<"\n Enter data=\n";
            cin>>newnode->data;
            newnode->next=NULL;
            temp=tail->next;
            while(i<pos-1)
            {
                temp=temp->next;
                i++;
            }
            newnode->next=temp->next;
            temp->next=newnode;
        }
    }
    void delfrombeg()
    {
        Node *temp;
        temp=tail->next;
        if(tail==NULL)
        {
            cout<<"\n List is empty\n";
        }
        else if(temp==tail)
        {
            tail=NULL;
            delete temp;
        }
        else
        {
            tail->next=temp->next;
            delete temp;
        }
    }
    void delfromend()
    {
        Node *cur,*prev;
        cur=tail->next;
         if(tail==NULL)
        {
            cout<<"\n List is empty\n";
        }
        else if(cur==tail)
        {
            tail=NULL;
            delete cur;
        }
        else
        {
            while(cur->next!=tail->next)
            {
                prev=cur;
                cur=cur->next;
            }
            prev->next=tail->next;
            tail=prev;
            delete cur;
        }
    }
    void delfrompos()
    {
        Node *cur,*temp;
        int pos;
        int i=1;
        cur=tail->next;
        cout<<"\nEnter position=\n";
        cin>>pos;
        if(pos==1)
        {
            delfrombeg();
        }
        else
        {
            while(i<pos-1)
            {
                cur=cur->next;
                i++;
            }
            temp=cur->next;
            cur->next=temp->next;
            delete temp;
        }
    }
};
int main()
{
    Circularll c;
    c.createcll();
    c.display();
    int l;
    do
    {
        cout<<"\n CIRCULAR LINKED LIST \n";
        cout<<"1) INSERTATBEG        2) INSERTATEND\n"
            <<"3) INSERTATPOS        4) DELFROMBEG\n"
            <<"5) DELFROMEND         6) DELATPOS\n";
        cout<<"Enter your choice\n";
        cin>>l;
        switch(l)
        {
            case 1:
              c.insertatbeg();
              c.display();
              break;
            case 2:
              c.insertatend();
              c.display();
              break;
            case 3:
              c.insertatpos();
              c.display();
              break;
            case 4:
              c.delfrombeg();
              c.display();
              break;
            case 5:
              c.delfromend();
              c.display();
              break;
            case 6:
              c.delfrompos();
              c.display();
              break;
            default:
              break;
        }
    }while(l!=0);
}


